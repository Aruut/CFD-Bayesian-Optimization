function [modelArray] = slice_sample_models(initModel, nSamples, nBurnin, nThin)
%SLICE_SAMPLE_MODELS

% Initialize based on initial model
theta0 = [ ...
	initModel.Beta; ...
	initModel.Sigma; ...
	min(initModel.KernelInformation.KernelParameters, 1e3) ]';

lenBeta = length(initModel.Beta);
lenKernel = length(initModel.KernelInformation.KernelParameters);
iBeta = 1:lenBeta;
iSigma = lenBeta + 1;
iKernel = lenBeta + 1 + (1:lenKernel);

xS = initModel.X;
yS = initModel.Y;

% Do slice sampling to obtain hyperparameter samples
thetaList = slicesample( ...
	theta0, ...
	nSamples, ...
	'logpdf', @(t) gplogPDF(t, xS, yS, iBeta, iSigma, iKernel, initModel.BasisFunction, initModel.KernelFunction), ...
	'burnin', nBurnin, ...
	'thin', nThin );

% Create array of models from the hyperparameter samples
modelArray = cell(nSamples, 1);
for i = 1:nSamples
	modelArray{i} = fitrgp( ...
		xS, ...
		yS, ...
		'Standardize', true, ...
		'FitMethod', 'none', ...
		'PredictMethod', 'exact', ...
		'BasisFunction', initModel.BasisFunction, ...
		'Beta', thetaList(i, iBeta), ...
		'KernelFunction', initModel.KernelFunction, ...
		'KernelParameters', thetaList(i, iKernel), ...
		'Sigma', thetaList(i, iSigma), ...
		'ConstantSigma', true );
end

end

function [ logpdf ] = gplogPDF( theta, x, y, indBeta, indSigma, indKernel, basisFunc, kernelFunc )
% GPLOGPDF Helper function to calculate loglikelihood of a given theta

% Add probability from hyperparameter priors
% pdfPRIORS = [ ...
% 	pdf('Uniform', theta(indBeta), -1.2, 1.2), ...
% 	pdf('Uniform', theta(indSigma), 0.001, 2), ...
% 	pdf('Uniform', theta(indKernel), 0, 2) ];
pdfPRIORS = [ ...
	ones(size(theta(indBeta))), ...
	1*(theta(indSigma)>0.001), ...
	1*(theta(indKernel)>0) ];

logpdfPRIOR = log(prod(pdfPRIORS));

% Add probability from model mariginal likelihood
if logpdfPRIOR == -Inf
	logpdfMODEL = -Inf;
else
	model = fitrgp( ...
		x, ...
		y, ...
		'Standardize', true, ...
		'FitMethod', 'none', ...
		'PredictMethod', 'exact', ...
		'BasisFunction', basisFunc, ...
		'Beta', theta(indBeta), ...
		'KernelFunction', kernelFunc, ...
		'KernelParameters', theta(indKernel), ...
		'Sigma', theta(indSigma), ...
		'ConstantSigma', true );
	logpdfMODEL = model.Impl.computeLogLikelihoodExact();
end

logpdf = logpdfPRIOR + logpdfMODEL;

end
