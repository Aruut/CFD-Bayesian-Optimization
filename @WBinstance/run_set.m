function [obj, workbenchRunTimeSec, successBool] = run_set(obj, designPointIndices, simType, debugModeBool)
%RUN_SET Runs a set of design points.
%	[obj, RUNTIME, SUCCESS] = RUN_SET(obj,IND) runs the set of design
%	points in IND with the 'geometry' run type.
%
%	[obj, RUNTIME, SUCCESS] = RUN_SET(obj,IND,TYPE) runs the set of design
%	points in IND with the run type specified by TYPE. Available options
%	are:
%
%		'geometry'	- Updates and validates the geometry (necessary for
%					'simple' and 'seek' runs)
%		'simple'	- Runs the simulations at a single operating point
%		'seek'		- Seeks a desired operating point
%
%	[obj, RUNTIME, SUCCESS] = RUN_SET(...,DEBUG) specifies whether to
%	include debug messages, based on the bool DEBUG.
%
%   Part of the WBinstance class

if nargin < 4
	debugModeBool = false; % Default is to have debug messages off
end

if nargin < 3
	simType = 'geometry';
end

if ~ischar(simType)
	warning('simType must be a string.');
	successBool = false(size(designPointIndices));
	return
end

% Make sure designPointIndices is a row vector
if iscolumn(designPointIndices)
	DPind = transpose(designPointIndices);
else
	DPind = designPointIndices;
end

% Error out if the remaining disk space is below ~1GB
if java.io.File(obj.projectPath).getFreeSpace() < 1e9
	error('Remaining disk space is below 1GB, WB script will not be run.');
	successBool = false(size(designPointIndices));
	return
end	

% Error out if out-of-range design points are passed in
if any(DPind <= 0) || any(DPind > obj.designPoints.amount)
	warning('Invalid design point indices were passed to run_set().');
	successBool = false(size(designPointIndices));
	return
end

fileID = fopen(obj.scriptFilePath, 'w');
localPath = fileparts(mfilename('fullpath'));
designPointsToUpdateString = '';
initFromInd = obj.designPoints.initializeFrom;

% Write header information to the script file
fprintf(fileID, '# encoding: utf-8\n');
fprintf(fileID, '# Release %s\n', obj.workbenchVersion);
fprintf(fileID, '# RUN SET (%s) - script autogenerated in Matlab.\n', simType);
fprintf(fileID, 'SetScriptVersion(Version="17.1.127")\n');
fprintf(fileID, '\n');

% Copy in the pre-script for message parsing
messagePreCommands = fileread(fullfile(localPath, '..', 'resources', 'messages_export_pre_script.py'));
fprintf(fileID, '%s', messagePreCommands);

% Write command to open relevant file
fprintf(fileID, 'Open(FilePath="%s")\n', strrep(obj.projectPath, '\', '/'));

% Change method depending on simType
if strcmp(simType, 'geometry') % --- GEOMETRY MODE ------------------------
	% Create necessary design points
	% For each design point...
	for i = DPind
		if obj.designPoints.new(i)
			% Add script command to create new design point in WB for i
			fprintf(fileID, 'designPoint%d = Parameters.CreateDesignPoint()\n', i);
			fprintf(fileID, 'designPoint%d.Retained = True\n', i);
		else
			% Add script command to identify current design point as i
			fprintf(fileID, 'designPoint%d = Parameters.GetDesignPoint(Name="%s")\n', i, obj.designPoints.names{i});
			fprintf(fileID, 'designPoint%d.Retained = True\n', i);
		end
	end
	
	% Define the variables for the expression assignments
	fprintf(fileID, 'parameters = [');
	for i = find(obj.designPoints.paramMutable)'
		fprintf(fileID, 'Parameters.GetParameter(Name="%s"),', obj.designPoints.paramNames{i});
	end
	fprintf(fileID, ']\n');

	tempDPIneedingExpression = DPind(or( ...
		obj.designPoints.new(DPind), ...
		any(obj.designPoints.needsUpdate(DPind,:), 2)));
	fprintf(fileID, 'designPoints = [');
	for j = tempDPIneedingExpression
		fprintf(fileID, 'designPoint%d,', j);
	end
	fprintf(fileID, ']\n');

	fprintf(fileID, 'needsUpdates = [\n');
	for i = find(obj.designPoints.paramMutable)'
		fprintf(fileID, '[');
		for j = tempDPIneedingExpression
			if obj.designPoints.new(j) || obj.designPoints.needsUpdate(j,i)
				fprintf(fileID, 'True ,');
			else
				fprintf(fileID, 'False,');
			end
		end
		fprintf(fileID, '],\n');
	end
	fprintf(fileID, ']\n');

	fprintf(fileID, 'expressions = [\n');
	for i = find(obj.designPoints.paramMutable)'
		fprintf(fileID, '[');
		for j = tempDPIneedingExpression
			if obj.designPoints.new(j) || obj.designPoints.needsUpdate(j,i)
				if strcmp(obj.designPoints.paramUnits{i}, 'None')
					fprintf(fileID, '"%f",', obj.designPoints.data(j,i));
				else
					fprintf(fileID, '"%f [%s]",', obj.designPoints.data(j,i), obj.designPoints.paramUnits{i});
				end
			else
				fprintf(fileID, '"",');
			end
		end
		fprintf(fileID, '],\n');
	end
	fprintf(fileID, ']\n');

	geometryUpdateCommands = fileread(fullfile(localPath, '..', 'resources', 'geometry_update_script.py'));
	fprintf(fileID, '%s', geometryUpdateCommands);

	% Change the current design point to the current initializeFrom value
	fprintf(fileID, 'designPoint%d = Parameters.GetDesignPoint(Name="%s")\n', initFromInd, obj.designPoints.names{initFromInd});
	fprintf(fileID, 'if designPoint%d != Parameters.GetBaseDesignPoint():\n', initFromInd);
	fprintf(fileID, '\tParameters.SetBaseDesignPoint(DesignPoint=designPoint%d)\n', initFromInd);

% 	% Copy in the script for validity parsing
% 	% (sets invalid/failed simulation DP's to retained=false)
% 	parsingCommands = fileread(fullfile(localPath, '..', 'resources', 'validity_parsing_script.py'));
% 	fprintf(fileID, '%s', parsingCommands);
% 
% 	% Copy the data export commands into script
% 	dataExportCommands = fileread(fullfile(localPath, '..', 'resources', 'data_export_script.py'));
% 	fprintf(fileID, '%s', dataExportCommands);
% 
% 	% Add script command to save project with overwrite
% 	fprintf(fileID, 'Save(Overwrite=True)\n');
	
elseif strcmp(simType, 'simple') % --- SIMPLE MODE ------------------------
	% Change settings to use previously updated design point results
	% (Prevents unnecessary geometry updates)
	fprintf(fileID, 'designPointUpdateSettings1 = GetDesignPointUpdateSettings()\n');
	fprintf(fileID, 'designPointUpdateSettings1.UpdateOrder = "UpdateDesignPointsInOrder"\n');

	% Change settings to use full-updates
	fprintf(fileID, 'designPointUpdateSettings1.PartialUpdate = "None"\n');

	% Change the current design point to the current initializeFrom value
	fprintf(fileID, 'designPoint%d = Parameters.GetDesignPoint(Name="%s")\n', initFromInd, obj.designPoints.names{initFromInd});
	fprintf(fileID, 'try:\n');
	fprintf(fileID, '\tParameters.SetBaseDesignPoint(DesignPoint=designPoint%d)\n', initFromInd);
	fprintf(fileID, 'except:\n');
	fprintf(fileID, '\tpass\n');

	% Create designPointsToUpdateString, design points must need an update and be valid
	for i = DPind
		if any(obj.designPoints.needsUpdate(i,:)) && obj.designPoints.valid(i)
			% Add line to script to define the design point
			fprintf(fileID, 'designPoint%d = Parameters.GetDesignPoint(Name="%s")\n', i, obj.designPoints.names{i});

			% Add to list of designpoints for updating
			designPointsToUpdateString = sprintf('%sdesignPoint%d, ', designPointsToUpdateString, i);
		end
	end

	% Add script command to update the relevant design points
	if ~isempty(designPointsToUpdateString)
		%TBC could add the protected try..except statement around this
		fprintf(fileID, 'backgroundSession1 = UpdateAllDesignPoints(DesignPoints=[%s])\n', designPointsToUpdateString);
	else
		fprintf(fileID, '# No design points need updating.\n');
	end

% 	% Copy in the script for validity parsing
% 	% (sets invalid/failed simulation DP's to retained=false)
% 	validityParsingCommands = fileread(fullfile(localPath, '..', 'resources', 'validity_parsing_script.py'));
% 	fprintf(fileID, '%s', validityParsingCommands);
% 
% 	% Copy the data export commands into script
% 	%TBC could add the protected try..except statement around this
% 	dataExportCommands = fileread(fullfile(localPath, '..', 'resources', 'data_export_script.py'));
% 	fprintf(fileID, '%s', dataExportCommands);
% 
% 	% Copy in the post-script for message export
% 	messagePostCommands = fileread(fullfile(localPath, '..', 'resources', 'messages_export_post_script.py'));
% 	fprintf(fileID, '%s', messagePostCommands);
% 
% 	% Add script command to save project with overwrite
% 	fprintf(fileID, 'Save(Overwrite=True)\n');
	
elseif strcmp(simType, 'seek') % --- SEEK MODE ----------------------------
	% Define the /resources/ folder path
	fprintf(fileID, 'resourcesPath = ''%s''\n', strrep(fullfile(localPath, '..', 'resources'), filesep, '/'));
	
	% Write commands to import necessary linear algebra functions
	fprintf(fileID, 'import sys, os\n');
	fprintf(fileID, 'sys.path.append(os.path.abspath(''%s''))\n', strrep(fullfile(localPath, '..', 'resources'), filesep, '/'));
	fprintf(fileID, 'import LinAlg as la\n');
	
	% Define a list of design points for the seeking
	for i = DPind
		if obj.designPoints.valid(i)
			% Add line to script to define the design point
			fprintf(fileID, 'designPoint%d = Parameters.GetDesignPoint(Name="%s")\n', i, obj.designPoints.names{i});
		end
	end
	fprintf(fileID, 'designPoints = [');
	for i = DPind
		if obj.designPoints.valid(i)
			% Add to definition of designpoints for updating
			fprintf(fileID, 'designPoint%d,', i);
		end
	end
	fprintf(fileID, ']\n');
	
	% Define the polynomial and parameters for seeking
	fprintf(fileID, 'seekPolynomial = [');
	for i = 1:length(obj.seekPolynomial)
		fprintf(fileID, '%.8f,', obj.seekPolynomial(i));
	end
	fprintf(fileID, ']\n');
	fprintf(fileID, 'inputParameter = Parameters.GetParameter(Name="%s")\n', obj.designPoints.paramNames{obj.seekInputParamInd});
	fprintf(fileID, 'outputParameter = Parameters.GetParameter(Name="%s")\n', obj.designPoints.paramNames{obj.seekOutputParamInd});
	fprintf(fileID, 'iterationsParameter = Parameters.GetParameter(Name="%s")\n', obj.designPoints.paramNames{obj.iterationsParamInd});
	
	% Copy in the seeking script
	seekingUpdateCommands = fileread(fullfile(localPath, '..', 'resources', 'seeking_update_script.py'));
	fprintf(fileID, '%s', seekingUpdateCommands);
	
else % Invalid simType
	fclose(fileID);
	warning('Invalid simType.');
	successBool = false(size(designPointIndices));
	return
end

% Copy in the script for validity parsing
% (sets invalid/failed simulation DP's to retained=false)
validityParsingCommands = fileread(fullfile(localPath, '..', 'resources', 'validity_parsing_script.py'));
fprintf(fileID, '%s', validityParsingCommands);

% Copy the data export commands into script
dataExportCommands = fileread(fullfile(localPath, '..', 'resources', 'data_export_script.py'));
fprintf(fileID, '%s', dataExportCommands);

% Copy in the post-script for message export
messagePostCommands = fileread(fullfile(localPath, '..', 'resources', 'messages_export_post_script.py'));
fprintf(fileID, '%s', messagePostCommands);

% Copy in the post-script for file checking and save
messagePostCommands = fileread(fullfile(localPath, '..', 'resources', 'check_and_save_script.py'));
fprintf(fileID, '%s', messagePostCommands);

% Run script file, return time taken
fclose(fileID);
[obj, workbenchRunTimeSec] = obj.run_workbench_script(debugModeBool);

% Import results from exported file
dataExportPath = [fileparts(obj.projectPath) '\fullDataExport.csv'];
obj.designPoints = WBdesignPointList(dataExportPath);

% Set successBool output
successBool = obj.designPoints.valid(DPind');

end
